name = 'strutil'

String gitUrl = "git@github.com:HBOCodeLabs/${name}.git" as String
String branchName = env.BRANCH_NAME ?: 'master'
String changeID = env.CHANGE_ID

version = env.new_version
slackChannel = 'k8s-alerts'
workspace = env.workspace

node("build") {
    workspace = pwd().replace('/home/jenkins-slave', "$CONTAINER_HOME")

    try {

        stage('GitHub pull') {
            if (changeID != null) {
                // pulling PR
                gitCloneBuild(gitUrl, "origin/pr/${changeID}/merge", '+refs/pull/*:refs/remotes/origin/pr/*')
            } else {
                // pulling Branch
                gitCloneBuild(gitUrl, branchName)
            }
        }

        version = sh(script: 'make version-get', returnStdout: true)

        script {
            currentBuild.displayName = "${currentBuild.displayName}: ${version}"
        }

        // build for all branches
        stage('Build and Test') {
            withEnv(["USER_HOME=$CONTAINER_HOME", "PROJECT_DIR=$workspace", "BUILD_ENV=jenkins"]) {
                ansiColor('xterm') {
                    sh 'make build'
                }
            }
        }

        // release master branch only
        if (branchName.equals('master')) {
            stage('Tag release') {
                sh "git tag v${version}"
                sh 'git tag -l'
            }

            def latestTag = sh(script: 'git tag --sort version:refname | tail -1', returnStdout: true)

            stage('Validate version') {
                validateVersion latestTag, version
                echo "current version: ${version}"
                echo "latest tag: ${latestTag}"
            }

            slackNotify slackChannel, "${name} Release Version: ${version}", env.RUN_DISPLAY_URL, 'STARTED'

            stage('Push tag') {
                sh "git push origin v${version}"
            }
        }

        currentBuild.result = 'SUCCESS'
    } catch (Throwable e) {
        currentBuild.result = 'FAILURE'
        throw e
    } finally {
        if (branchName.equals('master')) {
            slackNotify(slackChannel,
                    "${name} Build Branch: ${env.BRANCH_NAME}, Version: ${version}",
                    env.RUN_DISPLAY_URL,
                    currentBuild.result)
            influxdbJobStatus "${name}-release"
        }
    }
}
