name = 'hurley-kit'

String gitUrl = "git@github.com:HBOCodeLabs/${name}.git" as String
String branchName = env.BRANCH_NAME ?: 'master'
String changeID = env.CHANGE_ID

version = env.new_version
slackChannel = 'k8s-alerts'
workspace = env.workspace

node("build") {
    workspace = pwd().replace('/home/jenkins-slave', "$CONTAINER_HOME")
}

if (branchName.equals('master') && version != null) {
    release(gitUrl, branchName)
} else {
    build(gitUrl, branchName, changeID)
}

// Runs Build Pipeline
// [GitHub Pull] -> [Build] -> [Test]
def build(String gitUrl, String branchName, String changeID) {
    node("build") {
        try {

            stage('GitHub pull') {
                if (changeID != null) {
                    // pulling PR
                    gitCloneBuild(gitUrl, "origin/pr/${changeID}/merge", '+refs/pull/*:refs/remotes/origin/pr/*')
                } else {
                    // pulling Branch
                    gitCloneBuild(gitUrl, branchName)
                }
            }

            version = sh(script: 'make version-get', returnStdout: true)

            script {
                currentBuild.displayName = "${currentBuild.displayName}: ${version}"
            }

            stage('Build') {
                withEnv(["USER_HOME=$CONTAINER_HOME", "PROJECT_DIR=$workspace", "BUILD_ENV=jenkins"]) {
                    ansiColor('xterm') {
                        sh 'make build'
                    }
                }
            }

            stage('Test') {
                withEnv(["USER_HOME=$CONTAINER_HOME", "PROJECT_DIR=$workspace", "BUILD_ENV=jenkins"]) {
                    ansiColor('xterm') {
                        sh 'make test'
                    }
                }
            }

            currentBuild.result = 'SUCCESS'
        } catch (Throwable e) {
            currentBuild.result = 'FAILURE'
            throw e
        } finally {
            cobertura coberturaReportFile: 'coverage/coverage.xml', conditionalCoverageTargets: '70, 0, 0', lineCoverageTargets: '80, 0, 0', maxNumberOfBuilds: 0, methodCoverageTargets: '80, 0, 0', onlyStable: false, sourceEncoding: 'ASCII', zoomCoverageChart: false
            slackNotify(slackChannel,
                    "${name} Build Branch: ${env.BRANCH_NAME}, Version: ${version}",
                    env.RUN_DISPLAY_URL,
                    currentBuild.result)
        }
    }
}

// Runs Release Pipeline
def release(String gitUrl, String branchName) {
    node {

        //noinspection GroovyAssignabilityCheck
        properties([disableConcurrentBuilds()])

        try {
            stage("Checkout master") {
                gitCloneRelease(gitUrl, branchName)
                // prune all local tags that are not in remote
                sh 'git tag -l | xargs git tag -d'
                sh 'git fetch --tags'
                sh 'git tag -l'
            }

            stage('Prepare release') {
              withEnv(["USER_HOME=$CONTAINER_HOME", "PROJECT_DIR=$workspace", "BUILD_ENV=jenkins"]) {
                  ansiColor('xterm') {
                      sh 'make release-prepare'
                  }
              }
            }

            version = sh(script: 'make version-get', returnStdout: true)

            stage('Tag release') {
                sh "git tag v${version}"
                sh 'git tag -l'
            }

            def latestTag = sh(script: 'git tag --sort version:refname | tail -1', returnStdout: true)

            script {
                currentBuild.displayName = "${currentBuild.displayName}: ${version}"
            }

            stage('Validate version') {
                validateVersion latestTag, version
                echo "current version: ${version}"
                echo "latest tag: ${latestTag}"
            }

            slackNotify slackChannel, "${name} Release Version: ${version}", env.RUN_DISPLAY_URL, 'STARTED'

            stage('Build') {
                withEnv(["USER_HOME=$CONTAINER_HOME", "PROJECT_DIR=$workspace", "BUILD_ENV=jenkins"]) {
                    ansiColor('xterm') {
                        sh 'make build'
                    }
                }
            }

            stage('Test') {
                withEnv(["USER_HOME=$CONTAINER_HOME", "PROJECT_DIR=$workspace", "BUILD_ENV=jenkins"]) {
                    ansiColor('xterm') {
                        sh 'make test'
                    }
                }
            }

            stage('Push tag') {
                sh "git push origin v${version}"
            }

            currentBuild.result = 'SUCCESS'
        } catch (Throwable e) {
            currentBuild.result = 'FAILURE'
            throw e
        } finally {
            cobertura coberturaReportFile: 'coverage/coverage.xml', conditionalCoverageTargets: '70, 0, 0', lineCoverageTargets: '80, 0, 0', maxNumberOfBuilds: 0, methodCoverageTargets: '80, 0, 0', onlyStable: false, sourceEncoding: 'ASCII', zoomCoverageChart: false
            slackNotify(slackChannel,
                    "${name} Build Branch: ${env.BRANCH_NAME}, Version: ${version}",
                    env.RUN_DISPLAY_URL,
                    currentBuild.result)
            influxdbJobStatus "${name}-release"
        }
    }
}
